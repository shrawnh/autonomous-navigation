from stable_baselines3 import TD3, PPO, SAC
from myenv.mycontroller import MyController
import time

params = [
    {
        "id": 0,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0003,
            "buffer_size": 100000,
            "learning_starts": 1000,
            "batch_size": 64,
            "tau": 0.005,
            "gamma": 0.99,
            "train_freq": (1, "step"),
            "gradient_steps": 1,
            "ent_coef": "auto",
            "target_update_interval": 1,
            "use_sde": False,
            "sde_sample_freq": -1,
        },
    },
    {
        "id": 1,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0005,
            "buffer_size": 50000,
            "learning_starts": 500,
            "batch_size": 128,
            "tau": 0.02,
            "gamma": 0.98,
            "train_freq": 2,
            "gradient_steps": -1,
            "ent_coef": 0.1,
            "target_update_interval": 2,
            "use_sde": True,
            "sde_sample_freq": 10,
        },
    },
    {
        "id": 2,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0002,
            "buffer_size": 75000,
            "learning_starts": 2000,
            "batch_size": 100,
            "tau": 0.01,
            "gamma": 0.97,
            "train_freq": (5, "step"),
            "gradient_steps": 5,
            "ent_coef": "auto_0.1",
            "target_update_interval": 3,
        },
    },
    {
        "id": 3,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0004,
            "buffer_size": 80000,
            "learning_starts": 1500,
            "batch_size": 75,
            "tau": 0.008,
            "gamma": 0.96,
            "train_freq": 3,
            "gradient_steps": 2,
            "ent_coef": 0.2,
            "target_update_interval": 4,
        },
    },
    {
        "id": 4,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00025,
            "buffer_size": 60000,
            "learning_starts": 1200,
            "batch_size": 150,
            "tau": 0.007,
            "gamma": 0.95,
            "train_freq": 4,
            "gradient_steps": 3,
            "ent_coef": "auto",
            "target_update_interval": 5,
        },
    },
    {
        "id": 5,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0001,
            "buffer_size": 120000,
            "learning_starts": 800,
            "batch_size": 200,
            "tau": 0.006,
            "gamma": 0.94,
            "train_freq": 5,
            "gradient_steps": 4,
            "ent_coef": 0.3,
            "target_update_interval": 6,
        },
    },
    {
        "id": 6,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00035,
            "buffer_size": 70000,
            "learning_starts": 900,
            "batch_size": 180,
            "tau": 0.009,
            "gamma": 0.93,
            "train_freq": (2, "episode"),
            "gradient_steps": 6,
            "ent_coef": 0.4,
            "target_update_interval": 7,
        },
    },
    {
        "id": 7,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0006,
            "buffer_size": 130000,
            "learning_starts": 100,
            "batch_size": 50,
            "tau": 0.004,
            "gamma": 0.92,
            "train_freq": (1, "episode"),
            "gradient_steps": 7,
            "ent_coef": 0.5,
            "target_update_interval": 8,
            "use_sde": True,
            "sde_sample_freq": 20,
        },
    },
    {
        "id": 8,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0007,
            "buffer_size": 140000,
            "learning_starts": 250,
            "batch_size": 40,
            "tau": 0.003,
            "gamma": 0.91,
            "train_freq": (3, "episode"),
            "gradient_steps": -1,
            "ent_coef": "auto",
            "target_update_interval": 9,
            "use_sde_at_warmup": True,
        },
    },
    {
        "id": 9,
        "agent": SAC,
        "name": "sac",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0008,
            "buffer_size": 150000,
            "learning_starts": 400,
            "batch_size": 30,
            "tau": 0.002,
            "gamma": 0.9,
            "train_freq": (4, "episode"),
            "gradient_steps": 8,
            "ent_coef": "auto_0.2",
            "target_update_interval": 10,
            "use_sde": False,
            "sde_sample_freq": -1,
        },
    },
    {
        "id": 10,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00025,
            "n_steps": 2000,
            "batch_size": 128,
            "n_epochs": 8,
            "gamma": 0.99,
            "gae_lambda": 0.93,
            "clip_range": 0.2,
            "ent_coef": 0.01,
            "vf_coef": 0.4,
            "max_grad_norm": 0.5,
        },
    },
    {
        "id": 11,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00035,
            "n_steps": 1900,
            "batch_size": 100,
            "n_epochs": 7,
            "gamma": 0.98,
            "gae_lambda": 0.94,
            "clip_range": 0.18,
            "ent_coef": 0.02,
            "vf_coef": 0.45,
            "max_grad_norm": 0.7,
        },
    },
    {
        "id": 12,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00015,
            "n_steps": 2100,
            "batch_size": 80,
            "n_epochs": 9,
            "gamma": 0.97,
            "gae_lambda": 0.92,
            "clip_range": 0.22,
            "ent_coef": 0.005,
            "vf_coef": 0.35,
            "max_grad_norm": 0.6,
        },
    },
    {
        "id": 13,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0002,
            "n_steps": 1750,
            "batch_size": 150,
            "n_epochs": 5,
            "gamma": 0.96,
            "gae_lambda": 0.88,
            "clip_range": 0.17,
            "ent_coef": 0.015,
            "vf_coef": 0.3,
            "max_grad_norm": 0.8,
        },
    },
    {
        "id": 14,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0003,
            "n_steps": 1600,
            "batch_size": 120,
            "n_epochs": 6,
            "gamma": 0.99,
            "gae_lambda": 0.9,
            "clip_range": 0.19,
            "ent_coef": 0.01,
            "vf_coef": 0.5,
            "max_grad_norm": 0.65,
        },
    },
    {
        "id": 15,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0001,
            "n_steps": 2200,
            "batch_size": 70,
            "n_epochs": 10,
            "gamma": 0.95,
            "gae_lambda": 0.91,
            "clip_range": 0.21,
            "ent_coef": 0.02,
            "vf_coef": 0.6,
            "max_grad_norm": 0.55,
        },
    },
    {
        "id": 16,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0004,
            "n_steps": 1800,
            "batch_size": 90,
            "n_epochs": 11,
            "gamma": 0.94,
            "gae_lambda": 0.89,
            "clip_range": 0.16,
            "ent_coef": 0.03,
            "vf_coef": 0.55,
            "max_grad_norm": 0.75,
        },
    },
    {
        "id": 17,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0005,
            "n_steps": 2500,
            "batch_size": 50,
            "n_epochs": 12,
            "gamma": 0.93,
            "gae_lambda": 0.87,
            "clip_range": 0.14,
            "ent_coef": 0.04,
            "vf_coef": 0.2,
            "max_grad_norm": 1.0,
            "use_sde": True,
        },
    },
    {
        "id": 18,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.0006,
            "n_steps": 1300,
            "batch_size": 110,
            "n_epochs": 13,
            "gamma": 0.92,
            "gae_lambda": 0.86,
            "clip_range": 0.13,
            "ent_coef": 0.05,
            "vf_coef": 0.25,
            "max_grad_norm": 1.2,
            "target_kl": 0.02,
        },
    },
    {
        "id": 19,
        "agent": PPO,
        "name": "ppo",
        "time_limit": 150.0,
        "args": {
            "learning_rate": 0.00005,
            "n_steps": 2700,
            "batch_size": 60,
            "n_epochs": 14,
            "gamma": 0.91,
            "gae_lambda": 0.85,
            "clip_range": 0.15,
            "ent_coef": 0.06,
            "vf_coef": 0.1,
            "max_grad_norm": 0.9,
            "stats_window_size": 100,
            "use_sde": False,
        },
    },
    {
        "id": 20,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 1000,
            "batch_size": 256,
            "tau": 0.005,
            "gamma": 0.99,
            "train_freq": 2,
            "gradient_steps": 1,
            "policy_delay": 2,
        },
    },
    {
        "id": 21,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 500,
            "batch_size": 128,
            "tau": 0.02,
            "gamma": 0.98,
            "train_freq": 1,
            "gradient_steps": -1,
            "policy_delay": 2,
        },
    },
    {
        "id": 22,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 1500,
            "batch_size": 64,
            "tau": 0.005,
            "gamma": 0.99,
            "train_freq": 5,
            "gradient_steps": 2,
            "policy_delay": 2,
        },
    },
    {
        "id": 23,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 2000,
            "batch_size": 100,
            "tau": 0.01,
            "gamma": 0.95,
            "train_freq": 3,
            "gradient_steps": 5,
            "policy_delay": 1,
        },
    },
    {
        "id": 24,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 1000,
            "batch_size": 256,
            "tau": 0.01,
            "gamma": 0.97,
            "train_freq": 4,
            "gradient_steps": 3,
            "policy_delay": 1,
        },
    },
    {
        "id": 25,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 800,
            "batch_size": 200,
            "tau": 0.008,
            "gamma": 0.96,
            "train_freq": 2,
            "gradient_steps": 4,
            "policy_delay": 3,
        },
    },
    {
        "id": 26,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 1200,
            "batch_size": 150,
            "tau": 0.005,
            "gamma": 0.98,
            "train_freq": 1,
            "gradient_steps": 6,
            "policy_delay": 2,
        },
    },
    {
        "id": 27,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 2500,
            "batch_size": 300,
            "tau": 0.003,
            "gamma": 0.99,
            "train_freq": 1,
            "gradient_steps": 8,
            "policy_delay": 4,
            "target_policy_noise": 0.2,
            "target_noise_clip": 0.5,
        },
    },
    {
        "id": 28,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 500,
            "batch_size": 64,
            "tau": 0.02,
            "gamma": 0.95,
            "train_freq": 3,
            "gradient_steps": -1,
            "policy_delay": 1,
            "target_policy_noise": 0.3,
            "target_noise_clip": 0.6,
        },
    },
    {
        "id": 29,
        "agent": TD3,
        "name": "td3",
        "time_limit": 20.0,
        "args": {
            "learning_starts": 3000,
            "batch_size": 350,
            "tau": 0.001,
            "gamma": 0.92,
            "train_freq": 5,
            "gradient_steps": 10,
            "policy_delay": 5,
            "target_policy_noise": 0.1,
            "target_noise_clip": 0.4,
        },
    },
]

controllers_path = (
    "/Users/shrwnh/Development/autonomous-navigation/src/simulation/controllers"
)


def check_all_ids_are_unique(params):
    ids = [param["id"] for param in params]
    all_unique = len(ids) == len(set(ids))
    if not all_unique:
        not_unique_ids = [id for id in ids if ids.count(id) > 1]
        raise ValueError(f"Agent ids are not unique: {not_unique_ids}")
    return all_unique


def main():
    if not check_all_ids_are_unique(params):
        return
    controller = MyController(
        model_mode="train_save",
        model_version="alpha",
        version_mode="new",
        env_mode="step-1",
        robot_sensors="front",
    )

    for index, value in enumerate(params):
        try:
            with open(f"{controllers_path}/{value['name']}/logs/params/params__{value['id']}_{index}_{time.time()}.txt", "w") as f:  # type: ignore
                f.write(str(value))
            controller.main(
                value["agent"],
                value["name"],
                1e6,
                value["args"],
                f"_{value['id']}_{index}_{time.time()}",
            )
        except Exception as e:
            with open(f"{controllers_path}/{value['name']}/logs/errors.txt", "a") as f:
                f.write(f"In {value['id']}_{index} at {time.time()}: {e}\n")
            print(e)
            continue


if __name__ == "__main__":
    main()
